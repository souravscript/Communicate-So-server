// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  email       String   @unique
  supabaseId  String   @unique
  authType    AuthType?
  role        UserRole?
  categories  Category[] @relation(fields: [categoryIds], references: [id])
  categoryIds String[] @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  uploadedResources Resource[] @relation("ResourceUploader")
  queries     Query[]  // Relation to queries they've created
}

enum AuthType {
  EMAIL
  GOOGLE
  FACEBOOK
}

enum UserRole {
  Employee
  Executive
  Admin
}

model Category {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  users       User[]   @relation(fields: [userIds], references: [id])
  userIds     String[] @db.ObjectId
  queries     Query[]  // Relation to queries made in this category
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Resource {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  type        ResourceType
  url         String
  accessLevel AccessLevel
  uploadedBy  String   @db.ObjectId
  createdAt   DateTime @default(now())

  uploader    User     @relation(fields: [uploadedBy], references: [id], name: "ResourceUploader")
  //sharedWith  ResourceShared[]
  //company     Company  @relation(fields: [companyId], references: [id], name: "CompanyResources")
}

model Query {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  content     String   // The actual query text
  response    String?  // Optional AI response
  platform    String?  // Platform where the query was made
  metadata    Json?    // Additional metadata about the query
  createdBy   String   @db.ObjectId
  categoryId  String   @db.ObjectId  // Reference to the category
  user        User     @relation(fields: [createdBy], references: [id])
  category    Category @relation(fields: [categoryId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum ResourceType {
  WEBSITE
  PDF
  LINK
  SALESFORCE
  SLACK
}

enum AccessLevel {
  PUBLIC
  PRIVATE
}

model DataSource {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  isEnabled   Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// model Company {
//   id         String   @id @default(auto()) @map("_id") @db.ObjectId
//   name       String
//   domain     String   @unique
//   verified   Boolean  @default(false)
//   users      User[]   @relation("CompanyToUser")
//   createdAt  DateTime @default(now())
//   resources  Resource[] @relation("CompanyResources")
// }

// model UserCategory {
//   id         String   @id @default(auto()) @map("_id") @db.ObjectId
//   userId     String   @db.ObjectId
//   categoryId String   @db.ObjectId

//   //user       User     @relation(fields: [userId], references: [id])
//   category   Category @relation(fields: [categoryId], references: [id])
// }

// model ResourceShared {
//   id         String   @id @default(auto()) @map("_id") @db.ObjectId
//   resourceId String   @db.ObjectId
//   userId     String   @db.ObjectId
  
//   //resource   Resource @relation(fields: [resourceId], references: [id])
//   user       User     @relation(fields: [userId], references: [id])
// }
